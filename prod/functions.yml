uploadBrands:
  handler: handler.handler
  events:
    - httpApi:
        path: /brands
        method: post
  package:
    artifact: ./src/build/uploadBrands.zip
uploadImage:
  handler: handler.handler
  events:
    - httpApi:
        path: /image
        method: post
  package:
    artifact: ./src/build/uploadImage.zip
uploadProducts:
  handler: handler.handler
  events:
    - httpApi:
        path: /products
        method: post
  package:
    artifact: ./src/build/uploadProducts.zip
uploadSupplier:
  handler: handler.handler
  events:
    - httpApi:
        path: /supplier
        method: post
  package:
    artifact: ./src/build/uploadSupplier.zip
uploadPromotions:
  handler: handler.handler
  events:
    - httpApi:
        path: /promotions
        method: post
  package:
    artifact: ./src/build/uploadPromotions.zip
getProductsWithPromotions:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - httpApi:
        path: /active_promotions/products
        method: get
        parameters:
          querystrings:
            pageNumber: true
            pageSize: true
            category: true
  package:
    artifact: ./src/build/getProductsWithPromotions.zip
getCategoryList:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - httpApi:
        path: /categories
        method: get
  package:
    artifact: ./src/build/getCategoryList.zip
getLocations:
  handler: handler.handler
  events:
    - httpApi:
        path: /countries
        method: get
    - httpApi:
        path: /countries/{country}/states
        method: get
        parameters:
          querystrings:
            beginsWith: true
    - httpApi:
        path: /countries/{country}/states/{state}/cities
        method: get
        parameters:
          querystrings:
            beginsWith: true
  package:
    artifact: ./src/build/getLocations.zip
getBanners:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - httpApi:
        path: /banners
        method: get
  package:
    artifact: ./src/build/getBanners.zip
postBanners:
  handler: handler.handler
  events:
    - httpApi:
        path: /banners
        method: post
  package:
    artifact: ./src/build/postBanners.zip
createUser:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}}
    USER_POOL_ID: ${file(${self:provider.stage}/env.yml):USER_POOL_ID}
  events:
    - httpApi:
        path: /users/create
        method: post
  package:
    artifact: ./src/build/createUser.zip
resendCode:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - httpApi:
        path: /users/resend_confirmation_code
        method: post
  package:
    artifact: ./src/build/resendCode.zip
forgotPassword:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - httpApi:
        path: /users/forgot_password
        method: post
  package:
    artifact: ./src/build/forgotPassword.zip
forceResetPassword:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
    REGION_COGNITO: ${file(${self:provider.stage}/env.yml):REGION_COGNITO}
    USER_POOL_ID: ${file(${self:provider.stage}/env.yml):USER_POOL_ID}
  events:
    - httpApi:
        path: /users/force_reset_password
        method: post
  package:
    artifact: ./src/build/forceResetPassword.zip
confirmForgotPassword:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - httpApi:
        path: /users/confirm_forgot_password
        method: post
  package:
    artifact: ./src/build/confirmForgotPassword.zip
userConfirmCode:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - httpApi:
        path: /users/confirm_code
        method: post
  package:
    artifact: ./src/build/userConfirmCode.zip
userPersonalInfo:
  handler: handler.handler
  events:
    - httpApi:
        path: /users/personal_info
        method: put
  package:
    artifact: ./src/build/userPersonalInfo.zip
authorizeUser:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - httpApi:
        path: /users/authorize
        method: post
  package:
    artifact: ./src/build/authorizeUser.zip
updateUser:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - httpApi:
        path: /users
        method: put
  package:
    artifact: ./src/build/updateUser.zip
getUser:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - httpApi:
        path: /users
        method: get
  package:
    artifact: ./src/build/getUser.zip
getProfileSummary:
  handler: handler.handler
  events:
    - httpApi:
        path: /users/summary
        method: get
  package:
    artifact: ./src/build/getProfileSummary.zip
getPresignUrl:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - httpApi:
        path: /bill/presigned_url
        method: get
  package:
    artifact: ./src/build/presignedUrl.zip
presignedVideoUrl:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - httpApi:
        path: /bill/presigned_video_url
        method: post
  package:
    artifact: ./src/build/presignedVideoUrl.zip
updateBillTable:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - httpApi:
        path: /bill/update-table
        method: put
  package:
    artifact: ./src/build/updateBillTable.zip
uploadBillVideo:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - httpApi:
        path: /bill/video
        method: post
  package:
    artifact: ./src/build/uploadBillVideo.zip
updateCashbackAmount:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - httpApi:
        path: /backoffice/update-cashback
        method: put
  package:
    artifact: ./src/build/updateCashbackAmount.zip
generateAccesToken:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
    REGION_COGNITO: ${file(${self:provider.stage}/env.yml):REGION_COGNITO}
    USER_POOL_ID: ${file(${self:provider.stage}/env.yml):USER_POOL_ID}
  events:
    - httpApi:
        path: /generateaccesstoken
        method: post
  package:
    artifact: ./src/build/generateAccesToken.zip      
logicalEraseUser:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - httpApi:
        path: /user/logical-erase
        method: put
  package:
    artifact: ./src/build/logicalEraseUser.zip
createOneSignalNotification:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - httpApi:
        path: /onesignal/create-notification
        method: post
  package:
    artifact: ./src/build/createOneSignalNotification.zip
saveNotification:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - httpApi:
        path: /onesignal/save-notification
        method: post
  package:
    artifact: ./src/build/saveNotification.zip
getNotifications:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - httpApi:
        path: /onesignal/notifications
        method: get
  package:
    artifact: ./src/build/getNotifications.zip
updateAllNotifications:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - httpApi:
        path: /onesignal/update-all-notifications
        method: put
  package:
    artifact: ./src/build/updateNotification.zip
triggerBillsTable:
  handler: handler.handler
  environment:
    REGION_COGNITO: ${file(${self:provider.stage}/env.yml):REGION_COGNITO}
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - stream:
        type: dynamodb
        arn:
          Fn::GetAtt:
            - BillsTable
            - StreamArn
  package:
    artifact: ./src/build/triggerBillsTable.zip
billsTextract:
  handler: handler.handler
  events:
    - sqs:
        arn:
          Fn::GetAtt:
            - SqsBillsTextract
            - Arn
  package:
    artifact: ./src/build/billsTextract.zip
billAnalysis:
  handler: handler.handler
  events:
    - sqs:
        arn:
          Fn::GetAtt:
            - SqsBillAnalysis
            - Arn
  package:
    artifact: ./src/build/billAnalysis.zip
billTextractPreProcessing:
  handler: handler.handler
  events:
    - sqs:
        arn:
          Fn::GetAtt:
            - SqsBillTextractPreProcessing
            - Arn
  package:
    artifact: ./src/build/billTextractPreProcessing.zip
productIdentify:
  handler: handler.handler
  events:
    - sqs:
        arn:
          Fn::GetAtt:
            - SqsProductIdentify
            - Arn
  package:
    artifact: ./src/build/productIdentify.zip
promotionsIdentify:
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - sqs:
        arn:
          Fn::GetAtt:
            - SqsPromotionsIdentify
            - Arn
  package:
    artifact: ./src/build/promotionsIdentify.zip
sendEmail:
  handler: handler.handler
  environment:
    SES_CLIENT_REGION: ${file(${self:provider.stage}/env.yml):SES_CLIENT_REGION}
  events:
    - sqs:
        arn:
          Fn::GetAtt:
            - SqsNotify
            - Arn
  package:
    artifact: ./src/build/sendEmail.zip
simpleHeaderOCR:
  handler: handler.handler
  events:
    - sqs:
        arn:
          Fn::GetAtt:
            - SqsSimpleHeaderOCR
            - Arn
  package:
    artifact: ./src/build/simpleHeaderOCR.zip
intelligentHeaderOCR:
  handler: handler.handler
  events:
    - sqs:
        arn:
          Fn::GetAtt:
            - SqsIntelligentHeaderOCR
            - Arn
  package:
    artifact: ./src/build/intelligentHeaderOCR.zip
seekHeaderRelationships:
  handler: handler.handler
  events:
    - sqs:
        arn:
          Fn::GetAtt:
            - SqsSeekHeaderRelationships
            - Arn
  package:
    artifact: ./src/build/seekHeaderRelationships.zip
checkHeaderDictionary:
  handler: handler.handler
  events:
    - sqs:
        arn:
          Fn::GetAtt:
            - SqsCheckHeaderDictionary
            - Arn
  package:
    artifact: ./src/build/checkHeaderDictionary.zip
addHeaderDictionary:
  handler: handler.handler
  events:
    - sqs:
        arn:
          Fn::GetAtt:
            - SqsAddHeaderDictionary
            - Arn
  package:
    artifact: ./src/build/addHeaderDictionary.zip
triggerS3BillsBucket:
  handler: handler.handler
  events:
    - s3:
        bucket: ${self:custom.s3Bills}
        event: s3:ObjectCreated:*
        existing: true
  package:
    artifact: ./src/build/triggerS3BillsBucket.zip
triggerTemporaryBucketS3:
  handler: handler.handler
  events:
    - s3:
        bucket: ${self:custom.temporaryBucketS3}
        event: s3:ObjectCreated:*
        existing: true
  package:
    artifact: ./src/build/triggerTemporaryBucketS3.zip
compressImageVideoFile:
  handler: handler.handler
  environment:
    MEDIA_CONVERT_ROLE_ARN:
      Fn::GetAtt:
        - MediaConvertRole
        - Arn
  events:
    - sqs:
        arn:
          Fn::GetAtt:
            - SqsCompressImageVideoFile
            - Arn
  package:
    artifact: ./src/build/compressImageVideoFile.zip
billVertexIa:
  handler: handler.handler
  timeout: 900
  events:
    - sqs:
        arn:
          Fn::GetAtt:
            - SqsBillsVertex
            - Arn
  package:
    artifact: ./src/build/billVertexIa.zip
triggerBillsTableVertex:
  handler: handler.handler
  environment:
    REGION_COGNITO: ${file(${self:provider.stage}/env.yml):REGION_COGNITO}
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
    - stream:
        type: dynamodb
        arn:
          Fn::GetAtt:
            - BillsTableVertex
            - StreamArn
  package:
    artifact: ./src/build/triggerBillsTableVertex.zip
getUserBills: 
  handler: handler.handler
  environment:
    COGNITO_CLIENT_ID_ENCRYPTED: ${file(${self:provider.stage}/env.yml):COGNITO_CLIENT_ID_ENCRYPTED}
  events:
   - httpApi:
      path: /users/getbills
      method: get
  package:
    artifact: ./src/build/getUserBills.zip